def Discriminator():
  inp = tf.keras.layers.Input(shape=[256, 256, 3], name='input_image')
  tar = tf.keras.layers.Input(shape=[256, 256, 3], name='target_image')

  x = tf.keras.layers.concatenate([inp, tar])  # (batch_size, 256, 256, channels*2)

  down1 = downsample(64, 4, False)(x)  # (batch_size, 128, 128, 64)
  down2 = downsample(128, 4)(down1)  # (batch_size, 64, 64, 128)
  down3 = downsample(256, 4)(down2)  # (batch_size, 32, 32, 256)
  down4 = downsample(512,4)(down3)

  # Zweite letzte Ausgabeschicht
  initializer = tf.random_normal_initializer(0., 0.02)
  last = tf.keras.layers.Conv2D(512, 4, padding='same', kernel_initializer=initializer)(down4)
  last = tf.keras.layers.BatchNormalization()(last)
  last = tf.keras.layers.LeakyReLU()(last)

  # Patch-Ausgang
  patch_out = tf.keras.layers.Conv2D(1, 4, padding='same', kernel_initializer=initializer)(last)
  patch_out = tf.keras.layers.Activation('sigmoid')(patch_out)

  return tf.keras.Model(inputs=[inp, tar], outputs=patch_out)